diff --git a/src/idaplugin/config.cpp b/src/idaplugin/config.cpp
index 776dbe6..8606489 100644
--- a/src/idaplugin/config.cpp
+++ b/src/idaplugin/config.cpp
@@ -34,7 +34,7 @@ bool canDecompileInput(
 			return false;
 		}
 	}
-	else if (!inf_is_32bit())
+	else if (!inf_is_32bit_or_higher())
 	{
 		WARNING_GUI(RetDec::pluginName << " version " << RetDec::pluginVersion
 				<< " cannot decompile PROCNAME = " << procName
@@ -99,8 +99,8 @@ bool canDecompileInput(
 	//
 	if (fileType == f_BIN)
 	{
-		if (inf_is_64bit) bitSize = 64;
-		else if (inf_is_32bit) bitSize = 32;
+		if (inf_is_64bit()) bitSize = 64;
+		else if (inf_is_32bit_or_higher()) bitSize = 32;
 		else
 		{
 			WARNING_GUI("Can decompile only 32/64 bit f_BIN.\n");
@@ -552,7 +552,7 @@ void generateCallingConvention(
 
 		case CM_CC_INVALID:
 		case CM_CC_UNKNOWN:
-		case CM_CC_RESERVE4:
+		case CM_CC_GOLANG:
 		case CM_CC_RESERVE3:
 		default:             configCC.setIsUnknown(); break;
 	}
diff --git a/src/idaplugin/place.cpp b/src/idaplugin/place.cpp
index a910b14..3fc7e15 100644
--- a/src/idaplugin/place.cpp
+++ b/src/idaplugin/place.cpp
@@ -239,7 +239,7 @@ void retdec_place_t::registerPlace(const plugin_t& PLUGIN)
 	///
 	/// Note: Whenever one of the 'p1' or 'p2' places is unregistered,
 	/// corresponding converters will be automatically unregistered as well.
-	register_loc_converter(
+	register_loc_converter2(
 		_template.name(),
 		_idaplace.name(),
 		place_converter
@@ -287,7 +287,7 @@ std::ostream& operator<<(std::ostream& os, const retdec_place_t& p)
 lecvt_code_t idaapi place_converter(
         lochist_entry_t* dst,
         const lochist_entry_t& src,
-        TWidget* view)
+        TWidget* view, uint32)
 {
 	// idaplace_t -> retdec_place_t
 	if (src.place()->name() == std::string(_idaplace.name()))
diff --git a/src/idaplugin/place.h b/src/idaplugin/place.h
index ca34dea..0bd2e25 100644
--- a/src/idaplugin/place.h
+++ b/src/idaplugin/place.h
@@ -219,7 +219,8 @@ class retdec_place_t : public place_t
 lecvt_code_t idaapi place_converter(
         lochist_entry_t* dst,
         const lochist_entry_t& src,
-        TWidget* view
+        TWidget* view,
+        uint32 flags
 );
 
 #endif
